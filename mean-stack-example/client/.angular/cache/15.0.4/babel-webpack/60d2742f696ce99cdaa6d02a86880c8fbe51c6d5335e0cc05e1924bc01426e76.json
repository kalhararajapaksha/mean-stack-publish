{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../test.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../navbar/navbar.component\";\nexport class SquareComponent {\n  constructor(wsService, renderer, el, router, route) {\n    this.wsService = wsService;\n    this.renderer = renderer;\n    this.el = el;\n    this.router = router;\n    this.route = route;\n    this.nameControl = new FormControl('');\n    this.items = Array.from(Array(10).keys());\n    //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n    // You can use properties and methods here to keep track of the state of the square\n    this.clientID = \"\";\n    this.GameID = \"\";\n    this.playerColor = \"\";\n    this.game = null;\n    this.backgroundColor = 'white';\n    this.items = Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if (message.method == \"connect\") {\n        this.clientID = message.clientId;\n        console.log('hello');\n        console.log(this.clientID);\n        const id = this.route.snapshot.paramMap.get('id');\n        console.log(id);\n        if (!id) {\n          alert('No id provided');\n        } else {\n          this.GameID = id;\n          console.log(this.GameID);\n          this.join(id);\n        }\n      }\n      ;\n      // if(message.method==\"create\"){\n      //   this.GameID=message.game.id;\n      //   console.log(\"New Game Created\");       \n      //   console.log(message.game);\n      //   //this.join();\n      // };\n      if (message.method == \"join\") {\n        this.GameID = message.game.id;\n        this.game = message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach(num => {\n          console.log(this.clientID);\n          if (num.clientId == this.clientID) {\n            this.items = Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor = num.color;\n            console.log(this.playerColor);\n            // this.backgroundColor=this.playerColor;\n          }\n        });\n      }\n\n      ;\n      if (message.method == \"update\") {\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n          this.changeColor(key, value);\n        });\n      }\n      ;\n    });\n  }\n  ngAfterViewInit() {\n    console.log('View has been initialized');\n    // Do additional setup here\n  }\n\n  join(id) {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId: id\n    };\n    this.wsService.send(payLoad);\n    console.log(\"send join request \");\n  }\n  clickOnSeat(data) {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: this.GameID,\n      ballId: data,\n      color: this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n  changeColor(i, color) {\n    //this.backgroundColor = color;\n    const div = document.getElementById(i);\n    this.renderer.setStyle(div, 'background-color', color);\n    //this.renderer.setStyle(this.el.nativeElement.querySelector(`#${i}`), 'background-color', this.backgroundColor);\n  }\n}\n\nSquareComponent.ɵfac = function SquareComponent_Factory(t) {\n  return new (t || SquareComponent)(i0.ɵɵdirectiveInject(i1.TestService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nSquareComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SquareComponent,\n  selectors: [[\"app-square\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[\"id\", \"divPlayers\"], [1, \"container-md\"]],\n  template: function SquareComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-navbar\")(1, \"div\", 0);\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵelement(3, \"div\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [i3.NavbarComponent],\n  styles: [\".square[_ngcontent-%COMP%] {\\r\\n    width: 100px;\\r\\n    height: 100px;\\r\\n    margin-top: 10px;\\r\\n    margin-right: 10px;\\r\\n    float: right;\\r\\n    border-style: groove;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2VhdC1vcmRlci9zcXVhcmUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osb0JBQW9CO0VBQ3RCIiwic291cmNlc0NvbnRlbnQiOlsiLnNxdWFyZSB7XHJcbiAgICB3aWR0aDogMTAwcHg7XHJcbiAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGJvcmRlci1zdHlsZTogZ3Jvb3ZlO1xyXG4gIH1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","SquareComponent","constructor","wsService","renderer","el","router","route","Array","from","keys","items","receive","subscribe","message","method","clientID","clientId","console","log","id","snapshot","paramMap","get","alert","GameID","join","game","clients","forEach","num","balls","playerColor","color","state","Object","entries","key","value","changeColor","ngAfterViewInit","payLoad","gameId","send","clickOnSeat","data","ballId","i","div","document","getElementById","setStyle","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean-stack-publish\\mean-stack-publish\\mean-stack-example\\client\\src\\app\\seat-order\\seat-order.component.ts","D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean-stack-publish\\mean-stack-publish\\mean-stack-example\\client\\src\\app\\seat-order\\seat-order.component.html"],"sourcesContent":["import { Component, Renderer2, ElementRef, AfterViewInit } from '@angular/core';\nimport { TestService } from '../test.service';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-square',\n  templateUrl: './seat-order.component.html',\n  styleUrls: ['square.component.css']\n})\nexport class SquareComponent implements AfterViewInit{\n  nameControl = new FormControl('');\n  items =Array.from(Array(10).keys());\n  //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n  // You can use properties and methods here to keep track of the state of the square\n   private clientID=\"\";\n   private GameID=\"\";\n   private playerColor=\"\";\n   private game=null;\n   backgroundColor: string = 'white';\n\n\n\n   constructor(private wsService: TestService,private renderer: Renderer2, private el: ElementRef,private router: Router,\n    private route: ActivatedRoute) {\n    this.items=Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if(message.method==\"connect\"){\n\n        this.clientID=message.clientId;\n        console.log('hello');\n        console.log(this.clientID);\n        const id = this.route.snapshot.paramMap.get('id');\n        console.log(id);\n        if (!id) {\n          alert('No id provided');\n        }\n        else{ \n          this.GameID=id;\n          console.log(this.GameID);\n          this.join(id);}\n      };\n      // if(message.method==\"create\"){\n      //   this.GameID=message.game.id;\n      //   console.log(\"New Game Created\");       \n      //   console.log(message.game);\n      //   //this.join();\n      // };\n      if(message.method==\"join\"){\n        this.GameID=message.game.id;\n        this.game=message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach((num: any) => {\n          console.log(this.clientID);\n\n          if(num.clientId==this.clientID){\n            this.items =Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor=num.color\n            console.log(this.playerColor);\n           // this.backgroundColor=this.playerColor;\n          }\n        });\n\n      };\n      if(message.method==\"update\"){\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n          this.changeColor(key,value);\n        });\n\n\n      };\n    });\n  }\n\n  ngAfterViewInit() {\n    console.log('View has been initialized');\n    // Do additional setup here\n  }\n\n\n  join(id:any) {\n\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId:id,\n    };\n    this.wsService.send(payLoad);\n    console.log(\"send join request \")\n  }\n\n  clickOnSeat(data: any) {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:this.GameID,\n      ballId:data,\n      color:this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n\n  changeColor(i: any,color: any) {\n    //this.backgroundColor = color;\n    const div = document.getElementById(i);\n    this.renderer.setStyle(div, 'background-color', color);\n    //this.renderer.setStyle(this.el.nativeElement.querySelector(`#${i}`), 'background-color', this.backgroundColor);\n  }\n\n\n}\n","<!-- <button id = 'btnCreate' (click)=\"send()\">New Game</button>\r\n <button id = 'btnJoin' (click)=\"join()\">Join Game</button> -->\r\n<!-- <input type = 'text' [formControl]=\"nameControl\" id = 'txtGameId'> --> \r\n<app-navbar></app-navbar>\r\n<div id  = 'divPlayers'></div>\r\n<div class=\"container-md\">\r\n\r\n<div>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}