{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../test.service\";\nconst _c0 = [\"canvas\"];\nexport class CanvasComponent {\n  constructor(wsService, renderer, el) {\n    this.wsService = wsService;\n    this.renderer = renderer;\n    this.el = el;\n    this.isDrawing = false;\n    this.lastX = 0;\n    this.lastY = 0;\n    this.color = 'red';\n    this.items = Array.from(Array(10).keys());\n    this.clientID = \"\";\n    this.GameID = \"\";\n    this.playerColor = \"\";\n    this.game = null;\n    this.backgroundColor = 'white';\n    this.items = Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if (message.method == \"connect\") {\n        this.clientID = message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n        this.join();\n      }\n      ;\n      // if(message.method==\"create\"){\n      //   this.GameID=message.game.id;\n      //   console.log(\"New Game Created\");       \n      //   console.log(message.game);\n      // };\n      if (message.method == \"join\") {\n        this.GameID = message.game.id;\n        this.game = message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach(num => {\n          console.log(this.clientID);\n          if (num.clientId == this.clientID) {\n            this.items = Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor = num.color;\n            console.log(this.playerColor);\n            // this.backgroundColor=this.playerColor;\n          }\n        });\n      }\n\n      ;\n      if (message.method == \"update\") {\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        let x = message.game.stateX;\n        let y = message.game.stateY;\n        if (message.game.mState == \"start\") {\n          this.startDrawing(x, y);\n        }\n        if (message.game.mState == \"draw\") {\n          this.draw(x, y);\n        }\n        if (message.game.mState == \"end\") {\n          this.stopDrawing();\n        }\n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n        });\n      }\n      ;\n    });\n  }\n  ngAfterViewInit() {\n    if (this.canvas) {\n      this.ctx = this.canvas.nativeElement.getContext('2d');\n      this.canvas.nativeElement.width = this.canvas.nativeElement.offsetWidth;\n      this.canvas.nativeElement.height = this.canvas.nativeElement.offsetHeight;\n    }\n  }\n  startDrawing(lastX, lastY) {\n    if (this.canvas) {\n      const rect = this.canvas.nativeElement.getBoundingClientRect();\n    }\n    this.isDrawing = true;\n    this.lastX = lastX;\n    this.lastY = lastY;\n    this.join();\n    console.log(\"start drawing\");\n  }\n  draw(clientX, clientY) {\n    if (!this.isDrawing) {\n      return;\n    }\n    if (this.ctx) {\n      console.log(\" drawing\");\n      this.ctx.strokeStyle = this.color;\n      this.ctx.fillStyle = this.color;\n      this.ctx.lineWidth = 13;\n      this.ctx.beginPath();\n      console.log(this.lastX + \",\" + this.lastY);\n      this.ctx.moveTo(this.lastX - 300, this.lastY);\n      this.ctx.lineTo(clientX - 300, clientY);\n      this.ctx.stroke();\n    }\n    this.lastX = clientX;\n    this.lastY = clientY;\n  }\n  stopDrawing() {\n    console.log(\"stop drawing\");\n    this.isDrawing = false;\n  }\n  //Mouse event\n  mouseDown(event) {\n    //this.startDrawing(event.clientX,event.clientY);\n    this.startdrawingValuesSend(event.clientX, event.clientY);\n  }\n  mouseUp() {\n    //this.stopDrawing();\n    this.enddrawingValuesSend();\n  }\n  mouseMove(event) {\n    //this.draw(event.clientX,event.clientY)\n    this.drawingValuesSend(event.clientX, event.clientY);\n  }\n  join() {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId: '230120A001'\n    };\n    this.wsService.send(payLoad);\n  }\n  startdrawingValuesSend(clientX, clientY) {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: '230120A001',\n      ballId: 1,\n      clientX: clientX,\n      clientY: clientY,\n      color: this.playerColor,\n      mstate: \"start\"\n    };\n    this.wsService.send(payLoad);\n  }\n  drawingValuesSend(clientX, clientY) {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: '230120A001',\n      ballId: 1,\n      clientX: clientX,\n      clientY: clientY,\n      color: this.playerColor,\n      mstate: \"draw\"\n    };\n    this.wsService.send(payLoad);\n  }\n  enddrawingValuesSend() {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: '230120A001',\n      ballId: 1,\n      clientX: 0,\n      clientY: 0,\n      color: this.playerColor,\n      mstate: \"end\"\n    };\n    this.wsService.send(payLoad);\n  }\n}\nCanvasComponent.ɵfac = function CanvasComponent_Factory(t) {\n  return new (t || CanvasComponent)(i0.ɵɵdirectiveInject(i1.TestService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nCanvasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CanvasComponent,\n  selectors: [[\"app-canvas\"]],\n  viewQuery: function CanvasComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"id\", \"drawing-canvas\", 1, \"canvas-border\", 3, \"mousedown\", \"mousemove\", \"mouseup\"], [\"canvas\", \"\"]],\n  template: function CanvasComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"canvas\", 0, 1);\n      i0.ɵɵlistener(\"mousedown\", function CanvasComponent_Template_canvas_mousedown_0_listener($event) {\n        return ctx.mouseDown($event);\n      })(\"mousemove\", function CanvasComponent_Template_canvas_mousemove_0_listener($event) {\n        return ctx.mouseMove($event);\n      })(\"mouseup\", function CanvasComponent_Template_canvas_mouseup_0_listener() {\n        return ctx.mouseUp();\n      });\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".canvas-border[_ngcontent-%COMP%] {\\n    border: 1px solid black;\\n    color: red !important;\\n    width:100%;\\n    height:800px;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2FudmFzL2NhbnZhcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSx1QkFBdUI7SUFDdkIscUJBQXFCO0lBQ3JCLFVBQVU7SUFDVixZQUFZO0VBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FudmFzLWJvcmRlciB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgY29sb3I6IHJlZCAhaW1wb3J0YW50O1xuICAgIHdpZHRoOjEwMCU7XG4gICAgaGVpZ2h0OjgwMHB4O1xuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["CanvasComponent","constructor","wsService","renderer","el","Array","from","keys","items","receive","subscribe","message","method","clientID","clientId","console","log","join","GameID","game","id","clients","forEach","num","balls","playerColor","color","state","x","stateX","y","stateY","mState","startDrawing","draw","stopDrawing","Object","entries","key","value","ngAfterViewInit","canvas","ctx","nativeElement","getContext","width","offsetWidth","height","offsetHeight","lastX","lastY","rect","getBoundingClientRect","isDrawing","clientX","clientY","strokeStyle","fillStyle","lineWidth","beginPath","moveTo","lineTo","stroke","mouseDown","event","startdrawingValuesSend","mouseUp","enddrawingValuesSend","mouseMove","drawingValuesSend","payLoad","gameId","send","ballId","mstate","selectors","viewQuery","i0"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean-stack-publish\\mean-stack-publish\\mean-stack-example\\client\\src\\app\\canvas\\canvas.component.ts"],"sourcesContent":["import { Component, ViewChild, ElementRef,Renderer2,AfterViewInit } from '@angular/core';\nimport { TestService } from '../test.service';\n\n@Component({\n  selector: 'app-canvas',\n  template: `\n\n  <canvas #canvas id=\"drawing-canvas\" class=\"canvas-border\" (mousedown)=\"mouseDown($event)\" (mousemove)=\"mouseMove($event)\" (mouseup)=\"mouseUp()\"></canvas>\n  `,\n  styles: [`.canvas-border {\n    border: 1px solid black;\n    color: red !important;\n    width:100%;\n    height:800px;\n  }`\n  ]\n})\nexport class CanvasComponent {\n  @ViewChild('canvas', { static: true }) canvas?: ElementRef;\n  private ctx?: CanvasRenderingContext2D;\n  private isDrawing = false;\n  private lastX = 0;\n  private lastY = 0;\n  color = 'red';\n  items =Array.from(Array(10).keys());\n  private clientID=\"\";\n  private GameID=\"\";\n  private playerColor=\"\";\n  private game=null;\n  backgroundColor: string = 'white';\n\n  \n\n  constructor(private wsService: TestService,private renderer: Renderer2, private el: ElementRef) {\n    this.items=Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if(message.method==\"connect\"){\n\n        this.clientID=message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n        this.join();\n      };\n      // if(message.method==\"create\"){\n      //   this.GameID=message.game.id;\n      //   console.log(\"New Game Created\");       \n      //   console.log(message.game);\n        \n      // };\n      if(message.method==\"join\"){\n        this.GameID=message.game.id;\n        this.game=message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach((num: any) => {\n          console.log(this.clientID);\n\n          if(num.clientId==this.clientID){\n            this.items =Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor=num.color\n            console.log(this.playerColor);\n           // this.backgroundColor=this.playerColor;\n          }\n        });\n\n      };\n      if(message.method==\"update\"){\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        let x=message.game.stateX;\n        let y=message.game.stateY;\n        if(message.game.mState==\"start\"){\n          this.startDrawing(x,y);\n        }\n        if(message.game.mState==\"draw\"){\n          this.draw(x,y);\n        }\n        if(message.game.mState==\"end\"){\n          this.stopDrawing();\n        }\n        \n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n          \n          \n        });\n\n\n      };\n    });\n  }\n  \n  ngAfterViewInit() {\n    if(this.canvas) {\n      this.ctx = this.canvas.nativeElement.getContext('2d');\n      this.canvas.nativeElement.width = this.canvas.nativeElement.offsetWidth;\n      this.canvas.nativeElement.height = this.canvas.nativeElement.offsetHeight;\n      \n  }\n  }\n\n  startDrawing(lastX: number,lastY: number) {\n    if(this.canvas) {\n    const rect = this.canvas.nativeElement.getBoundingClientRect();\n    }\n    this.isDrawing = true;\n    this.lastX = lastX;\n    this.lastY = lastY;\n        this.join();\n    console.log(\"start drawing\");\n  }\n\n  draw(clientX: number,clientY: number) {\n   \n    if (!this.isDrawing) {\n      return;\n    }\n    if(this.ctx){\n      console.log(\" drawing\");\n      this.ctx.strokeStyle = this.color;\n      this.ctx.fillStyle=this.color;\n      this.ctx.lineWidth = 13;\n      this.ctx.beginPath();  \n      console.log(this.lastX+\",\"+this.lastY);\n      this.ctx.moveTo(this.lastX-300, this.lastY);\n      this.ctx.lineTo(clientX-300, clientY);\n      this.ctx.stroke();\n    }\n    this.lastX = clientX;\n    this.lastY = clientY;\n  }\n\n  stopDrawing() {\n    console.log(\"stop drawing\");\n    this.isDrawing = false;\n  }\n\n //Mouse event\n  mouseDown(event: MouseEvent){\n    //this.startDrawing(event.clientX,event.clientY);\n    this.startdrawingValuesSend(event.clientX,event.clientY);\n  }\n  mouseUp(){\n    //this.stopDrawing();\n    this.enddrawingValuesSend();\n  }\n\n  mouseMove(event: MouseEvent){\n    //this.draw(event.clientX,event.clientY)\n    this.drawingValuesSend(event.clientX,event.clientY);\n  }\n\n  join() {\n\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId:'230120A001',\n    };\n    this.wsService.send(payLoad);\n  }\n\n  startdrawingValuesSend(clientX: number,clientY: number) {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:'230120A001',\n      ballId:1,\n      clientX:clientX,\n      clientY:clientY,\n      color:this.playerColor,\n      mstate:\"start\"\n    };\n    this.wsService.send(payLoad);\n  }\n\n  drawingValuesSend(clientX: number,clientY: number) {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:'230120A001',\n      ballId:1,\n      clientX:clientX,\n      clientY:clientY,\n      color:this.playerColor,\n      mstate:\"draw\"\n    };\n    this.wsService.send(payLoad);\n  }\n\n  enddrawingValuesSend() {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:'230120A001',\n      ballId:1,\n      clientX:0,\n      clientY:0,\n      color:this.playerColor,\n      mstate:\"end\"\n    };\n    this.wsService.send(payLoad);\n  }\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}