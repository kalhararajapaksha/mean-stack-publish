{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../test.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\nfunction SquareComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function SquareComponent_div_8_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.clickOnSeat(i_r2));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", i_r2)(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r0.backgroundColor));\n  }\n}\nexport class SquareComponent {\n  constructor(wsService) {\n    this.wsService = wsService;\n    this.nameControl = new FormControl('');\n    this.items = Array.from(Array(22).keys());\n    //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n    // You can use properties and methods here to keep track of the state of the square\n    this.clientID = \"\";\n    this.GameID = \"\";\n    this.playerColor = \"\";\n    this.game = null;\n    this.backgroundColor = 'white';\n    this.items = Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if (message.method == \"connect\") {\n        this.clientID = message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n      }\n      ;\n      if (message.method == \"create\") {\n        this.GameID = message.game.id;\n        console.log(\"New Game Created\");\n        console.log(message.game);\n      }\n      ;\n      if (message.method == \"join\") {\n        this.GameID = message.game.id;\n        this.game = message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach(num => {\n          console.log(this.clientID);\n          if (num.clientId == this.clientID) {\n            this.items = Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor = num.color;\n            console.log(this.playerColor);\n            this.backgroundColor = this.playerColor;\n          }\n        });\n      }\n      ;\n      if (message.method == \"update\") {\n        console.log(message);\n        console.log(\"Game state updated\");\n      }\n      ;\n    });\n  }\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID\n    };\n    this.wsService.send(payLoad);\n  }\n  join() {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId: this.nameControl.value\n    };\n    this.wsService.send(payLoad);\n  }\n  clickOnSeat(data) {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: this.nameControl.value,\n      ballId: data,\n      color: this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n}\nSquareComponent.ɵfac = function SquareComponent_Factory(t) {\n  return new (t || SquareComponent)(i0.ɵɵdirectiveInject(i1.TestService));\n};\nSquareComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SquareComponent,\n  selectors: [[\"app-square\"]],\n  decls: 10,\n  vars: 2,\n  consts: [[\"id\", \"btnCreate\", 3, \"click\"], [\"id\", \"btnJoin\", 3, \"click\"], [\"type\", \"text\", \"id\", \"txtGameId\", 3, \"formControl\"], [\"id\", \"divPlayers\"], [\"id\", \"left-hand\", 1, \"left-hand\"], [4, \"ngFor\", \"ngForOf\"], [1, \"square\", 3, \"id\", \"ngStyle\", \"click\"]],\n  template: function SquareComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function SquareComponent_Template_button_click_0_listener() {\n        return ctx.send();\n      });\n      i0.ɵɵtext(1, \"New Game\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function SquareComponent_Template_button_click_2_listener() {\n        return ctx.join();\n      });\n      i0.ɵɵtext(3, \"Join Game\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2)(5, \"div\", 3);\n      i0.ɵɵelementStart(6, \"div\")(7, \"div\", 4);\n      i0.ɵɵtemplate(8, SquareComponent_div_8_Template, 2, 4, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"div\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.nameControl);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.items);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgStyle, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective],\n  styles: [\".square[_ngcontent-%COMP%] {\\r\\n    width: 100px;\\r\\n    height: 100px;\\r\\n    background-color: red;\\r\\n    margin-top: 10px;\\r\\n    margin-right: 10px;\\r\\n    float: right;\\r\\n    border: 1px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2VhdC1vcmRlci9zcXVhcmUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLFdBQVc7RUFDYiIsInNvdXJjZXNDb250ZW50IjpbIi5zcXVhcmUge1xyXG4gICAgd2lkdGg6IDEwMHB4O1xyXG4gICAgaGVpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBib3JkZXI6IDFweDtcclxuICB9XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","i0","SquareComponent","constructor","wsService","Array","from","keys","items","receive","subscribe","message","method","clientID","clientId","console","log","GameID","game","id","clients","forEach","num","balls","playerColor","color","backgroundColor","send","payLoad","join","gameId","nameControl","value","clickOnSeat","data","ballId","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean\\mean-stack-example\\client\\src\\app\\seat-order\\seat-order.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TestService } from '../test.service';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-square',\n  template: `    <button id = 'btnCreate' (click)=\"send()\">New Game</button>\n                 <button id = 'btnJoin' (click)=\"join()\">Join Game</button>\n                 <input type = 'text' [formControl]=\"nameControl\" id = 'txtGameId'>\n                 <div id  = 'divPlayers'></div>\n                 <div>\n                 <div id ='left-hand' class=\"left-hand\">\n                      <div   *ngFor=\"let item of items;let i=index\">\n                           <div [id]=\"i\" class='square'  (click)=\"clickOnSeat(i)\" [ngStyle]=\"{'background-color': backgroundColor}\"></div>\n                      </div>                 \n                 </div>\n                 <div>\n  `,\n  styleUrls: ['square.component.css']\n})\nexport class SquareComponent {\n  nameControl = new FormControl('');\n  items =Array.from(Array(22).keys());\n  //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n  // You can use properties and methods here to keep track of the state of the square\n   private clientID=\"\";\n   private GameID=\"\";\n   private playerColor=\"\";\n   private game=null;\n   backgroundColor: string = 'white';\n\n   constructor(private wsService: TestService) {\n    this.items=Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if(message.method==\"connect\"){\n\n        this.clientID=message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n\n      };\n      if(message.method==\"create\"){\n        this.GameID=message.game.id;\n        console.log(\"New Game Created\");       \n        console.log(message.game);\n\n      };\n      if(message.method==\"join\"){\n        this.GameID=message.game.id;\n        this.game=message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach((num: any) => {\n          console.log(this.clientID);\n\n          if(num.clientId==this.clientID){\n            this.items =Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor=num.color\n            console.log(this.playerColor);\n            this.backgroundColor=this.playerColor;\n          }\n        });\n\n      };\n      if(message.method==\"update\"){\n        console.log(message);\n        console.log(\"Game state updated\");\n\n\n      };\n    });\n  }\n\n\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  join() {\n\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  clickOnSeat(data: any) {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n      ballId:data,\n      color:this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}