{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nlet SquareComponent = class SquareComponent {\n  constructor(wsService) {\n    this.wsService = wsService;\n    this.nameControl = new FormControl('');\n    this.items = Array.from(Array(22).keys());\n    //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n    // You can use properties and methods here to keep track of the state of the square\n    this.clientID = \"\";\n    this.GameID = \"\";\n    this.playerColor = \"\";\n    this.game = null;\n    this.wsService.receive().subscribe(message => {\n      if (message.method == \"connect\") {\n        this.clientID = message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n      }\n      ;\n      if (message.method == \"create\") {\n        this.GameID = message.game.id;\n        console.log(\"New Game Created\");\n        this.items = Array.from(Array(0).keys());\n        console.log(message.game);\n      }\n      ;\n      if (message.method == \"join\") {\n        this.GameID = message.game.id;\n        this.game = message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach(num => {\n          console.log(this.clientID);\n          if (num.clientId == this.clientID) {\n            console.log(num);\n            this.playerColor = num.color;\n            console.log(this.playerColor);\n          }\n        });\n      }\n      ;\n    });\n  }\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID\n    };\n    this.wsService.send(payLoad);\n  }\n  join() {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId: this.nameControl.value\n    };\n    this.wsService.send(payLoad);\n  }\n  clickOnSeat() {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: this.nameControl.value,\n      ballId: 1,\n      color: \"blue\"\n    };\n    this.wsService.send(payLoad);\n  }\n};\nSquareComponent = __decorate([Component({\n  selector: 'app-square',\n  template: `    <button id = 'btnCreate' (click)=\"send()\">New Game</button>\n                 <button id = 'btnJoin' (click)=\"join()\">Join Game</button>\n                 <input type = 'text' [formControl]=\"nameControl\" id = 'txtGameId'>\n                 <div id  = 'divPlayers'></div>\n                 <div>\n                 <div id ='left-hand' class=\"left-hand\">\n                      <div   *ngFor=\"let item of items;let i=index\">\n                           <div [id]=\"i\" class='square'  (click)=\"clickOnSeat(\"i\")\"></div>\n                      </div>                 \n                 </div>\n                 <div>\n  `,\n  styleUrls: ['square.component.css']\n})], SquareComponent);\nexport { SquareComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","SquareComponent","constructor","wsService","Array","from","keys","receive","subscribe","message","method","clientID","clientId","console","log","GameID","game","id","items","clients","forEach","num","playerColor","color","send","payLoad","join","gameId","nameControl","value","clickOnSeat","ballId","selector","template","styleUrls"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean\\mean-stack-example\\client\\src\\app\\seat-order\\seat-order.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TestService } from '../test.service';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-square',\n  template: `    <button id = 'btnCreate' (click)=\"send()\">New Game</button>\n                 <button id = 'btnJoin' (click)=\"join()\">Join Game</button>\n                 <input type = 'text' [formControl]=\"nameControl\" id = 'txtGameId'>\n                 <div id  = 'divPlayers'></div>\n                 <div>\n                 <div id ='left-hand' class=\"left-hand\">\n                      <div   *ngFor=\"let item of items;let i=index\">\n                           <div [id]=\"i\" class='square'  (click)=\"clickOnSeat(\"i\")\"></div>\n                      </div>                 \n                 </div>\n                 <div>\n  `,\n  styleUrls: ['square.component.css']\n})\nexport class SquareComponent {\n  nameControl = new FormControl('');\n  items =Array.from(Array(22).keys());\n  //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n  // You can use properties and methods here to keep track of the state of the square\n   private clientID=\"\";\n   private GameID=\"\";\n   private playerColor=\"\";\n   private game=null;\n   constructor(private wsService: TestService) {\n    this.wsService.receive().subscribe(message => {\n      if(message.method==\"connect\"){\n        this.clientID=message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n\n      };\n      if(message.method==\"create\"){\n        this.GameID=message.game.id;\n        console.log(\"New Game Created\");\n        this.items =Array.from(Array(0).keys());\n        console.log(message.game);\n\n      };\n      if(message.method==\"join\"){\n        this.GameID=message.game.id;\n        this.game=message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        \n        message.game.clients.forEach((num: any) => {\n          console.log(this.clientID);\n\n          if(num.clientId==this.clientID){\n            console.log(num);\n            this.playerColor=num.color\n            console.log(this.playerColor);\n          }\n        });\n\n      };\n    });\n  }\n\n\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  join() {\n\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  clickOnSeat() {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n      ballId:1,\n      color:\"blue\"\n    };\n    this.wsService.send(payLoad);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}