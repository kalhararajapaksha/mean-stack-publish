{"ast":null,"code":"import { FormGroup } from '@angular/forms';\nimport { Observable, BehaviorSubject, combineLatest, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../station.service\";\nimport * as i2 from \"../train.service\";\nimport * as i3 from \"../shedule.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/router\";\nfunction ReservationFormComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const station_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", station_r2._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(station_r2.name);\n  }\n}\nconst _c0 = function (a1) {\n  return [\"reservation/\", a1];\n};\nfunction ReservationFormComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12);\n    i0.ɵɵelement(2, \"img\", 13);\n    i0.ɵɵelementStart(3, \"div\", 14)(4, \"h5\", 15);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 16);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\", 16);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 17);\n    i0.ɵɵtext(11, \"View Details\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const train_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"src\", train_r3.img_url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(train_r3.train_name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(train_r3.time);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Price: Rs \", train_r3.ticket_price, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(5, _c0, train_r3.train_name));\n  }\n}\nexport class ReservationFormComponent {\n  // <option *ngFor=\"let station of stations$ | async\" [value]=\"station._id\">{{station.name}}</option>\n  constructor(stationService, trainService, sheduleService, fb) {\n    this.stationService = stationService;\n    this.trainService = trainService;\n    this.sheduleService = sheduleService;\n    this.fb = fb;\n    this.initialState = new BehaviorSubject({});\n    this.session_id = \"123456\";\n    this.searchForm = new FormGroup({});\n    this.stations$ = new Observable();\n    this.trains$ = new Observable();\n    this.shedules$ = new Observable();\n    this.filteredTrains$ = new Observable();\n    this.filteredShedules$ = new Observable();\n    this.combinedFilteredData$ = new Observable();\n  }\n  // shedule?: Shedule;\n  // train?: Train;\n  get date() {\n    return this.searchForm.get('date');\n  }\n  ngOnInit() {\n    this.fetchStations();\n    this.initialState.subscribe(employee => {\n      this.searchForm = this.fb.group({\n        date: []\n      });\n    });\n  }\n  fetchStations() {\n    this.stations$ = this.stationService.getStations();\n  }\n  viewDetails() {\n    let dateString = this.searchForm.value.date;\n    //let dateObject = moment.utc(dateString).toDate();\n    //let formattedDate = moment.utc(dateObject).local().format();\n    this.trains$ = this.trainService.getTrains();\n    this.shedules$ = this.sheduleService.getShedules(dateString);\n    // combineLatest(this.trains$, this.shedules$).pipe(\n    //   map(([trains, schedules]) => {\n    //     return trains.filter(train => {\n    //       return schedules.some(schedule => schedule.train_name === train.train_name);\n    //     });\n    //   })\n    // ).subscribe(filteredTrains => {\n    //   console.log(\"filteredTrains\");\n    //   console.log(filteredTrains);\n    //   this.filteredTrains$ = of(filteredTrains);\n    //   // do something with the filtered trains\n    // });\n    combineLatest(this.trains$, this.shedules$).pipe(map(([trains, schedules]) => {\n      return {\n        trains: trains.filter(train => schedules.some(schedule => schedule.train_name === train.train_name)),\n        schedules: schedules.filter(schedule => trains.some(train => train.train_name === schedule.train_name))\n      };\n    })).subscribe(filteredTrains => {\n      console.log(\"filteredTrains\");\n      console.log(filteredTrains.schedules);\n      this.filteredTrains$ = of(filteredTrains.trains);\n      this.filteredShedules$ = of(filteredTrains.schedules);\n      // do something with the filtered trains\n    });\n\n    this.combinedFilteredData$ = combineLatest(this.filteredTrains$, this.filteredShedules$).pipe(map(([filteredTrains, filteredSchedules]) => {\n      return {\n        filteredTrains,\n        filteredSchedules\n      };\n    }));\n  }\n}\nReservationFormComponent.ɵfac = function ReservationFormComponent_Factory(t) {\n  return new (t || ReservationFormComponent)(i0.ɵɵdirectiveInject(i1.StationService), i0.ɵɵdirectiveInject(i2.TrainService), i0.ɵɵdirectiveInject(i3.SheduleService), i0.ɵɵdirectiveInject(i4.FormBuilder));\n};\nReservationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReservationFormComponent,\n  selectors: [[\"app-reservation-form\"]],\n  inputs: {\n    initialState: \"initialState\"\n  },\n  decls: 18,\n  vars: 7,\n  consts: [[1, \"row\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"from\"], [\"id\", \"from\", \"name\", \"from\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"date\"], [\"type\", \"date\", \"id\", \"date\", \"name\", \"date\", \"formControlName\", \"date\", 1, \"form-control\"], [\"type\", \"button\", \"value\", \"Search\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"class\", \"col-md-3\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"col-md-3\"], [1, \"card\"], [\"alt\", \"\", 1, \"card-img-top\", 3, \"src\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"btn\", \"btn-primary\", \"me-1\", 3, \"routerLink\"]],\n  template: function ReservationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"div\", 2)(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Destination:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"select\", 4);\n      i0.ɵɵtemplate(6, ReservationFormComponent_option_6_Template, 2, 2, \"option\", 5);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelementStart(13, \"input\", 8);\n      i0.ɵɵlistener(\"click\", function ReservationFormComponent_Template_input_click_13_listener() {\n        return ctx.viewDetails();\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(14, \"br\");\n      i0.ɵɵelementStart(15, \"div\", 0);\n      i0.ɵɵtemplate(16, ReservationFormComponent_div_16_Template, 12, 7, \"div\", 9);\n      i0.ɵɵpipe(17, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.searchForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 3, ctx.stations$));\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 5, ctx.filteredTrains$));\n    }\n  },\n  dependencies: [i5.NgForOf, i6.RouterLink, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Observable","BehaviorSubject","combineLatest","map","of","i0","ReservationFormComponent","constructor","stationService","trainService","sheduleService","fb","date","searchForm","get","ngOnInit","fetchStations","initialState","subscribe","employee","group","stations$","getStations","viewDetails","dateString","value","trains$","getTrains","shedules$","getShedules","pipe","trains","schedules","filter","train","some","schedule","train_name","filteredTrains","console","log","filteredTrains$","filteredShedules$","combinedFilteredData$","filteredSchedules","selectors","inputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean\\mean-stack-example\\client\\src\\app\\reservation-form\\reservation-form.component.ts"],"sourcesContent":["import { Component, OnInit,Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable,BehaviorSubject,combineLatest, map,of   } from 'rxjs';\nimport { Station } from '../station';\nimport { StationService } from '../station.service';\nimport { Train } from '../train';\nimport { TrainService } from '../train.service';\nimport { Shedule } from '../shedule';\nimport { SheduleService } from '../shedule.service';\nimport * as moment from 'moment';\n@Component({\n  selector: 'app-reservation-form',\n  template: `\n  <div class=\"row\">\n  <form [formGroup]=\"searchForm\">\n  <div class=\"form-group\">\n    <label for=\"from\">Destination:</label>\n    <select class=\"form-control\" id=\"from\"  name=\"from\">\n    <option *ngFor=\"let station of stations$ | async\" [value]=\"station._id\">{{station.name}}</option>\n    </select>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"date\">Date:</label>\n    <input type=\"date\" class=\"form-control\" id=\"date\"  name=\"date\" formControlName=\"date\">\n  </div>\n  <br>\n  <input type=\"button\" class=\"btn btn-primary\" (click)=\"viewDetails()\" value=\"Search\">\n</form>\n</div>\n<br>\n<div class=\"row\">\n<div class=\"col-md-3\" *ngFor=\"let train of filteredTrains$ | async\">\n<div class=\"card\">\n<img src=\"{{ train.img_url}}\" alt=\"\" class=\"card-img-top\">\n<div class=\"card-body\">\n  <h5 class=\"card-title\">{{ train.train_name}}</h5>\n  <p class=\"card-text\">{{ train.time}}</p>\n  <p class=\"card-text\">Price: Rs {{ train.ticket_price}}</p>\n  <button class=\"btn btn-primary  me-1\" [routerLink]=\"['reservation/',train.train_name]\">View Details</button>\n</div>\n</div>\n</div>\n</div>\n\n  `,\n  styles: [\n  ]\n})\nexport class ReservationFormComponent implements OnInit {\n  @Input()\n  initialState: BehaviorSubject<Station> = new BehaviorSubject({});\n  private session_id=\"123456\";\n  searchForm: FormGroup = new FormGroup({});\n  stations$: Observable<Station[]> = new Observable();\n  trains$: Observable<Train[]> = new Observable();\n  shedules$: Observable<Shedule[]> = new Observable();\n  filteredTrains$: Observable<Train[]> = new Observable();\n  filteredShedules$: Observable<Shedule[]> = new Observable();\n  combinedFilteredData$: Observable<{ filteredTrains: Train[]; filteredSchedules: Shedule[]; }> = new Observable();\n  // shedule?: Shedule;\n  // train?: Train;\n  \n\n  get date() { return this.searchForm.get('date')!; }\n // <option *ngFor=\"let station of stations$ | async\" [value]=\"station._id\">{{station.name}}</option>\n  constructor(private stationService: StationService,private trainService: TrainService,private sheduleService: SheduleService,private fb: FormBuilder) { }\n  \n  ngOnInit(): void {\n    this.fetchStations();\n    this.initialState.subscribe(employee => {\n      this.searchForm = this.fb.group({\n        date: [ ]       \n      });\n    });\n  \n  }\n  \n\n  \n  private fetchStations(): void {\n    this.stations$ = this.stationService.getStations();\n  }\n\n  viewDetails() {\n    let dateString = this.searchForm.value.date;\n    //let dateObject = moment.utc(dateString).toDate();\n    //let formattedDate = moment.utc(dateObject).local().format();\n    this.trains$ = this.trainService.getTrains();\n    this.shedules$=this.sheduleService.getShedules(dateString);\n\n    // combineLatest(this.trains$, this.shedules$).pipe(\n    //   map(([trains, schedules]) => {\n    //     return trains.filter(train => {\n    //       return schedules.some(schedule => schedule.train_name === train.train_name);\n    //     });\n    //   })\n    // ).subscribe(filteredTrains => {\n    //   console.log(\"filteredTrains\");\n    //   console.log(filteredTrains);\n    //   this.filteredTrains$ = of(filteredTrains);\n    //   // do something with the filtered trains\n    // });\n\n\n  \n    combineLatest(this.trains$, this.shedules$).pipe(\n      map(([trains, schedules]) => {   \n        return {\n          trains: trains.filter(train => schedules.some(schedule => schedule.train_name === train.train_name)),\n          schedules: schedules.filter(schedule => trains.some(train => train.train_name === schedule.train_name))\n      }\n      })\n    ).subscribe(filteredTrains => {\n      console.log(\"filteredTrains\");\n      console.log(filteredTrains.schedules);\n      this.filteredTrains$ = of(filteredTrains.trains);\n      this.filteredShedules$ = of(filteredTrains.schedules);\n      \n      // do something with the filtered trains\n    });\n\n    this.combinedFilteredData$ = combineLatest(this.filteredTrains$, this.filteredShedules$).pipe(\n      map(([filteredTrains, filteredSchedules]) => {\n        return {\n          filteredTrains,\n          filteredSchedules\n        }\n      })\n    )\n   \n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}