{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, BehaviorSubject, combineLatest, map, of } from 'rxjs';\nlet ReservationFormComponent = class ReservationFormComponent {\n  // <option *ngFor=\"let station of stations$ | async\" [value]=\"station._id\">{{station.name}}</option>\n  constructor(stationService, trainService, sheduleService, fb) {\n    this.stationService = stationService;\n    this.trainService = trainService;\n    this.sheduleService = sheduleService;\n    this.fb = fb;\n    this.initialState = new BehaviorSubject({});\n    this.session_id = \"123456\";\n    this.searchForm = new FormGroup({});\n    this.stations$ = new Observable();\n    this.trains$ = new Observable();\n    this.shedules$ = new Observable();\n    this.filteredTrains$ = new Observable();\n    this.filteredShedules$ = new Observable();\n    this.combinedFilteredData$ = new Observable();\n  }\n  // shedule?: Shedule;\n  // train?: Train;\n  get date() {\n    return this.searchForm.get('date');\n  }\n  ngOnInit() {\n    this.fetchStations();\n    this.initialState.subscribe(employee => {\n      this.searchForm = this.fb.group({\n        date: []\n      });\n    });\n  }\n  fetchStations() {\n    this.stations$ = this.stationService.getStations();\n  }\n  viewDetails() {\n    let dateString = this.searchForm.value.date;\n    //let dateObject = moment.utc(dateString).toDate();\n    //let formattedDate = moment.utc(dateObject).local().format();\n    this.trains$ = this.trainService.getTrains();\n    this.shedules$ = this.sheduleService.getShedules(dateString);\n    // combineLatest(this.trains$, this.shedules$).pipe(\n    //   map(([trains, schedules]) => {\n    //     return trains.filter(train => {\n    //       return schedules.some(schedule => schedule.train_name === train.train_name);\n    //     });\n    //   })\n    // ).subscribe(filteredTrains => {\n    //   console.log(\"filteredTrains\");\n    //   console.log(filteredTrains);\n    //   this.filteredTrains$ = of(filteredTrains);\n    //   // do something with the filtered trains\n    // });\n    combineLatest(this.trains$, this.shedules$).pipe(map(([trains, schedules]) => {\n      return {\n        trains: trains.filter(train => schedules.some(schedule => schedule.train_name === train.train_name)),\n        schedules: schedules.filter(schedule => trains.some(train => train.train_name === schedule.train_name))\n      };\n    })).subscribe(filteredTrains => {\n      console.log(\"filteredTrains\");\n      console.log(filteredTrains.schedules);\n      this.filteredTrains$ = of(filteredTrains.trains);\n      this.filteredShedules$ = of(filteredTrains.schedules);\n      // do something with the filtered trains\n      this.combinedFilteredData$ = combineLatest(this.filteredTrains$, this.filteredShedules$).pipe(map(([filteredTrains, filteredSchedules]) => {\n        return filteredTrains.map(train => {\n          let schedule = filteredSchedules.find(s => s.train_name === train.train_name);\n          return {\n            train,\n            schedule\n          };\n        });\n      }));\n    });\n  }\n};\n__decorate([Input()], ReservationFormComponent.prototype, \"initialState\", void 0);\nReservationFormComponent = __decorate([Component({\n  selector: 'app-reservation-form',\n  templateUrl: './reservation-form.component.html',\n  styles: []\n})], ReservationFormComponent);\nexport { ReservationFormComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","FormGroup","Observable","BehaviorSubject","combineLatest","map","of","ReservationFormComponent","constructor","stationService","trainService","sheduleService","fb","date","searchForm","get","ngOnInit","fetchStations","initialState","subscribe","employee","group","stations$","getStations","viewDetails","dateString","value","trains$","getTrains","shedules$","getShedules","pipe","trains","schedules","filter","train","some","schedule","train_name","filteredTrains","console","log","filteredTrains$","filteredShedules$","combinedFilteredData$","filteredSchedules","find","s","__decorate","selector","templateUrl","styles"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean-stack-publish\\mean-stack-publish\\mean-stack-example\\client\\src\\app\\reservation-form\\reservation-form.component.ts"],"sourcesContent":["import { Component, OnInit,Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable,BehaviorSubject,combineLatest, map,of   } from 'rxjs';\nimport { Station } from '../station';\nimport { StationService } from '../station.service';\nimport { Train } from '../train';\nimport { TrainService } from '../train.service';\nimport { Shedule } from '../shedule';\nimport { SheduleService } from '../shedule.service';\nimport * as moment from 'moment';\n@Component({\n  selector: 'app-reservation-form',\n  templateUrl: './reservation-form.component.html',\n  styles: []\n})\nexport class ReservationFormComponent implements OnInit {\n  @Input()\n  initialState: BehaviorSubject<Station> = new BehaviorSubject({});\n  private session_id=\"123456\";\n  searchForm: FormGroup = new FormGroup({});\n  stations$: Observable<Station[]> = new Observable();\n  trains$: Observable<Train[]> = new Observable();\n  shedules$: Observable<Shedule[]> = new Observable();\n  filteredTrains$: Observable<Train[]> = new Observable();\n  filteredShedules$: Observable<Shedule[]> = new Observable();\n  combinedFilteredData$: Observable<{ train: Train; schedule: Shedule | undefined; }[]> = new Observable();\n  // shedule?: Shedule;\n  // train?: Train;\n  \n\n  get date() { return this.searchForm.get('date')!; }\n // <option *ngFor=\"let station of stations$ | async\" [value]=\"station._id\">{{station.name}}</option>\n  constructor(private stationService: StationService,private trainService: TrainService,private sheduleService: SheduleService,private fb: FormBuilder) { }\n  \n  ngOnInit(): void {\n    this.fetchStations();\n    this.initialState.subscribe(employee => {\n      this.searchForm = this.fb.group({\n        date: [ ]       \n      });\n    });\n  \n  }\n  \n\n  \n  private fetchStations(): void {\n    this.stations$ = this.stationService.getStations();\n  }\n\n  viewDetails() {\n    let dateString = this.searchForm.value.date;\n    //let dateObject = moment.utc(dateString).toDate();\n    //let formattedDate = moment.utc(dateObject).local().format();\n    this.trains$ = this.trainService.getTrains();\n    this.shedules$=this.sheduleService.getShedules(dateString);\n\n    // combineLatest(this.trains$, this.shedules$).pipe(\n    //   map(([trains, schedules]) => {\n    //     return trains.filter(train => {\n    //       return schedules.some(schedule => schedule.train_name === train.train_name);\n    //     });\n    //   })\n    // ).subscribe(filteredTrains => {\n    //   console.log(\"filteredTrains\");\n    //   console.log(filteredTrains);\n    //   this.filteredTrains$ = of(filteredTrains);\n    //   // do something with the filtered trains\n    // });\n\n\n  \n    combineLatest(this.trains$, this.shedules$).pipe(\n      map(([trains, schedules]) => {   \n        return {\n          trains: trains.filter(train => schedules.some(schedule => schedule.train_name === train.train_name)),\n          schedules: schedules.filter(schedule => trains.some(train => train.train_name === schedule.train_name))\n      }\n      })\n    ).subscribe(filteredTrains => {\n      console.log(\"filteredTrains\");\n      console.log(filteredTrains.schedules);\n      this.filteredTrains$ = of(filteredTrains.trains);\n      this.filteredShedules$ = of(filteredTrains.schedules);\n      \n      // do something with the filtered trains\n      this.combinedFilteredData$ = combineLatest(this.filteredTrains$, this.filteredShedules$).pipe(\n        map(([filteredTrains, filteredSchedules]) => {\n          return filteredTrains.map(train => {\n            let schedule = filteredSchedules.find(s => s.train_name === train.train_name);\n            return {\n              train,\n              schedule\n            }\n          });\n        })\n      )\n    });\n\n\n    \n \n   \n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}