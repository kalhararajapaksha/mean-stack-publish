{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChildren, QueryList } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nlet SquareComponent = class SquareComponent {\n  constructor(wsService, renderer, el) {\n    this.wsService = wsService;\n    this.renderer = renderer;\n    this.el = el;\n    this.nameControl = new FormControl('');\n    this.items = Array.from(Array(22).keys());\n    this.squares = new QueryList();\n    //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n    // You can use properties and methods here to keep track of the state of the square\n    this.clientID = \"\";\n    this.GameID = \"\";\n    this.playerColor = \"\";\n    this.game = null;\n    this.backgroundColor = 'white';\n    this.items = Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if (message.method == \"connect\") {\n        this.clientID = message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n      }\n      ;\n      if (message.method == \"create\") {\n        this.GameID = message.game.id;\n        console.log(\"New Game Created\");\n        console.log(message.game);\n      }\n      ;\n      if (message.method == \"join\") {\n        this.GameID = message.game.id;\n        this.game = message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach(num => {\n          console.log(this.clientID);\n          if (num.clientId == this.clientID) {\n            this.items = Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor = num.color;\n            console.log(this.playerColor);\n            // this.backgroundColor=this.playerColor;\n          }\n        });\n      }\n\n      ;\n      if (message.method == \"update\") {\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n          this.changeColor(key, value);\n        });\n      }\n      ;\n    });\n  }\n  ngAfterViewInit() {\n    this.squares.changes.subscribe(t => {\n      this.squares = t;\n    });\n  }\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID\n    };\n    this.wsService.send(payLoad);\n  }\n  join() {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId: this.nameControl.value\n    };\n    this.wsService.send(payLoad);\n  }\n  clickOnSeat(data) {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: this.nameControl.value,\n      ballId: data,\n      color: this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n  changeColor(i, color) {\n    //this.backgroundColor = color;\n    //this.renderer.setStyle(this.el.nativeElement.querySelector('#4'), 'background-color', color);\n    if (this.squares) {\n      const square = this.squares.find(el => el.nativeElement.id === 'square_' + i);\n      if (square) {\n        this.renderer.setStyle(square.nativeElement, 'background-color', color);\n      }\n    }\n  }\n};\n__decorate([ViewChildren('square')], SquareComponent.prototype, \"squares\", void 0);\nSquareComponent = __decorate([Component({\n  selector: 'app-square',\n  template: `    <button id = 'btnCreate' (click)=\"send()\">New Game</button>\n                 <button id = 'btnJoin' (click)=\"join()\">Join Game</button>\n                 <input type = 'text' [formControl]=\"nameControl\" id = 'txtGameId'>\n                 <div id  = 'divPlayers'></div>\n                 <div>\n                 <div id ='left-hand' class=\"left-hand\">\n \n                      <div #square [id]=\"'square_' + i\" *ngFor=\"let item of items; let i=index\" class='squre'(click)=\"clickOnSeat(i)\"</div>               \n                 </div>\n                 <div>\n  `,\n  styleUrls: ['square.component.css']\n})], SquareComponent);\nexport { SquareComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChildren","QueryList","FormControl","SquareComponent","constructor","wsService","renderer","el","Array","from","keys","items","receive","subscribe","message","method","clientID","clientId","console","log","GameID","game","id","clients","forEach","num","balls","playerColor","color","state","Object","entries","key","value","changeColor","ngAfterViewInit","squares","changes","t","send","payLoad","join","gameId","nameControl","clickOnSeat","data","ballId","i","square","find","nativeElement","setStyle","__decorate","selector","template","styleUrls"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean\\mean-stack-example\\client\\src\\app\\seat-order\\seat-order.component.ts"],"sourcesContent":["import { Component, Renderer2, ElementRef, ViewChildren, QueryList,AfterViewInit  } from '@angular/core';\nimport { TestService } from '../test.service';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-square',\n  template: `    <button id = 'btnCreate' (click)=\"send()\">New Game</button>\n                 <button id = 'btnJoin' (click)=\"join()\">Join Game</button>\n                 <input type = 'text' [formControl]=\"nameControl\" id = 'txtGameId'>\n                 <div id  = 'divPlayers'></div>\n                 <div>\n                 <div id ='left-hand' class=\"left-hand\">\n \n                      <div #square [id]=\"'square_' + i\" *ngFor=\"let item of items; let i=index\" class='squre'(click)=\"clickOnSeat(i)\"</div>               \n                 </div>\n                 <div>\n  `,\n  styleUrls: ['square.component.css']\n})\nexport class SquareComponent implements AfterViewInit{\n  nameControl = new FormControl('');\n  items =Array.from(Array(22).keys());\n\n  @ViewChildren('square') squares: QueryList<ElementRef> = new QueryList<ElementRef>();\n  //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n  // You can use properties and methods here to keep track of the state of the square\n   private clientID=\"\";\n   private GameID=\"\";\n   private playerColor=\"\";\n   private game=null;\n   backgroundColor: string = 'white';\n\n   constructor(private wsService: TestService,private renderer: Renderer2, private el: ElementRef) {\n    this.items=Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if(message.method==\"connect\"){\n\n        this.clientID=message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n\n      };\n      if(message.method==\"create\"){\n        this.GameID=message.game.id;\n        console.log(\"New Game Created\");       \n        console.log(message.game);\n\n      };\n      if(message.method==\"join\"){\n        this.GameID=message.game.id;\n        this.game=message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach((num: any) => {\n          console.log(this.clientID);\n\n          if(num.clientId==this.clientID){\n            this.items =Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor=num.color\n            console.log(this.playerColor);\n           // this.backgroundColor=this.playerColor;\n          }\n        });\n\n      };\n      if(message.method==\"update\"){\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n          this.changeColor(key,value);\n        });\n\n\n      };\n    });\n  }\n  ngAfterViewInit() {\n    this.squares.changes.subscribe(t => {\n      this.squares = t;\n    });\n  }\n\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  join() {\n\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  clickOnSeat(data: any) {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n      ballId:data,\n      color:this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n\n  changeColor(i: any,color: any) {\n    //this.backgroundColor = color;\n    //this.renderer.setStyle(this.el.nativeElement.querySelector('#4'), 'background-color', color);\n    if(this.squares) {\n      const square = this.squares.find(el => el.nativeElement.id === 'square_' + i);\n      if (square) {\n        this.renderer.setStyle(square.nativeElement, 'background-color', color);\n      }\n    }\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}