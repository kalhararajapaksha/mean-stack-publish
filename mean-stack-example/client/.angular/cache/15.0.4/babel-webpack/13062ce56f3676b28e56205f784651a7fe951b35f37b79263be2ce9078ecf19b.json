{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../test.service\";\nexport class SquareComponent {\n  constructor(wsService) {\n    this.wsService = wsService;\n    //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n    // You can use properties and methods here to keep track of the state of the square\n    this.clientID = \"\";\n    this.GameID = \"\";\n    this.wsService.receive().subscribe(message => {\n      if (message.method == \"connect\") {\n        this.clientID = message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n      }\n      ;\n      if (message.method == \"create\") {\n        this.GameID = message.game.id;\n        console.log(\"New Game Created\");\n        console.log(message.game);\n      }\n      ;\n      if (message.method == \"join\") {\n        this.GameID = message.game.id;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n      }\n      ;\n    });\n  }\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID\n    };\n    this.wsService.send(payLoad);\n  }\n  join() {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId: this.GameID\n    };\n    this.wsService.send(payLoad);\n  }\n}\nSquareComponent.ɵfac = function SquareComponent_Factory(t) {\n  return new (t || SquareComponent)(i0.ɵɵdirectiveInject(i1.TestService));\n};\nSquareComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SquareComponent,\n  selectors: [[\"app-square\"]],\n  decls: 8,\n  vars: 0,\n  consts: [[\"id\", \"btnCreate\", 3, \"click\"], [\"id\", \"btnJoin\", 3, \"click\"], [\"type\", \"text\", \"id\", \"txtGameId\"], [\"id\", \"divPlayers\"], [\"id\", \"divBoard\"]],\n  template: function SquareComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function SquareComponent_Template_button_click_0_listener() {\n        return ctx.send();\n      });\n      i0.ɵɵtext(1, \"New Game\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function SquareComponent_Template_button_click_2_listener() {\n        return ctx.join();\n      });\n      i0.ɵɵtext(3, \"Join Game\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2)(5, \"div\", 3)(6, \"div\", 4)(7, \"div\");\n    }\n  },\n  styles: [\".square[_ngcontent-%COMP%] {\\r\\n    width: 100px;\\r\\n    height: 100px;\\r\\n    background-color: red;\\r\\n    margin-top: 10px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2VhdC1vcmRlci9zcXVhcmUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IscUJBQXFCO0lBQ3JCLGdCQUFnQjtFQUNsQiIsInNvdXJjZXNDb250ZW50IjpbIi5zcXVhcmUge1xyXG4gICAgd2lkdGg6IDEwMHB4O1xyXG4gICAgaGVpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;AAgBA,OAAM,MAAOA,eAAe;EAKzBC,YAAoBC,SAAsB;IAAtB,cAAS,GAATA,SAAS;IAJ9B;IACA;IACS,aAAQ,GAAC,EAAE;IACX,WAAM,GAAC,EAAE;IAEhB,IAAI,CAACA,SAAS,CAACC,OAAO,EAAE,CAACC,SAAS,CAACC,OAAO,IAAG;MAC3C,IAAGA,OAAO,CAACC,MAAM,IAAE,SAAS,EAAC;QAC3B,IAAI,CAACC,QAAQ,GAACF,OAAO,CAACG,QAAQ;QAC9BC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBD,OAAO,CAACC,GAAG,CAACL,OAAO,CAACG,QAAQ,CAAC;;MAE9B;MACD,IAAGH,OAAO,CAACC,MAAM,IAAE,QAAQ,EAAC;QAC1B,IAAI,CAACK,MAAM,GAACN,OAAO,CAACO,IAAI,CAACC,EAAE;QAC3BJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BD,OAAO,CAACC,GAAG,CAACL,OAAO,CAACO,IAAI,CAAC;;MAE1B;MACD,IAAGP,OAAO,CAACC,MAAM,IAAE,MAAM,EAAC;QACxB,IAAI,CAACK,MAAM,GAACN,OAAO,CAACO,IAAI,CAACC,EAAE;QAC3BJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtCD,OAAO,CAACC,GAAG,CAACL,OAAO,CAACO,IAAI,CAAC;;MAE1B;IACH,CAAC,CAAC;EACJ;EAGAE,IAAI;IACF,MAAMC,OAAO,GAAG;MACdT,MAAM,EAAE,QAAQ;MAChBE,QAAQ,EAAE,IAAI,CAACD;KAChB;IACD,IAAI,CAACL,SAAS,CAACY,IAAI,CAACC,OAAO,CAAC;EAC9B;EAEAC,IAAI;IACF,MAAMD,OAAO,GAAG;MACdT,MAAM,EAAE,MAAM;MACdE,QAAQ,EAAE,IAAI,CAACD,QAAQ;MACvBU,MAAM,EAAC,IAAI,CAACN;KACb;IACD,IAAI,CAACT,SAAS,CAACY,IAAI,CAACC,OAAO,CAAC;EAC9B;;AA5CWf,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MAVXC,iCAA0C;MAAjBA;QAAA,OAASC,UAAM;MAAA,EAAC;MAACD,wBAAQ;MAAAA,iBAAS;MAC3DA,iCAAwC;MAAjBA;QAAA,OAASC,UAAM;MAAA,EAAC;MAACD,yBAAS;MAAAA,iBAAS;MAC1DA,2BAAsC","names":["SquareComponent","constructor","wsService","receive","subscribe","message","method","clientID","clientId","console","log","GameID","game","id","send","payLoad","join","gameId","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean\\mean-stack-example\\client\\src\\app\\seat-order\\seat-order.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TestService } from '../test.service';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-square',\n  template: `    <button id = 'btnCreate' (click)=\"send()\">New Game</button>\n                 <button id = 'btnJoin' (click)=\"join()\">Join Game</button>\n                 <input type = 'text' id = 'txtGameId'>\n                 <div id  = 'divPlayers'></div>\n                 <div id  = 'divBoard'></div>\n                 <div> \n                 </div>\n  `,\n  styleUrls: ['square.component.css']\n})\nexport class SquareComponent {\n  //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n  // You can use properties and methods here to keep track of the state of the square\n   private clientID=\"\";\n   private GameID=\"\";\n   constructor(private wsService: TestService) {\n    this.wsService.receive().subscribe(message => {\n      if(message.method==\"connect\"){\n        this.clientID=message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n\n      };\n      if(message.method==\"create\"){\n        this.GameID=message.game.id;\n        console.log(\"New Game Created\");\n        console.log(message.game);\n\n      };\n      if(message.method==\"join\"){\n        this.GameID=message.game.id;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n\n      };\n    });\n  }\n\n\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  join() {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId:this.GameID,\n    };\n    this.wsService.send(payLoad);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}