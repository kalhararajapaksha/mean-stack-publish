{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nlet SquareComponent = class SquareComponent {\n  constructor(wsService, renderer, el, router, route, employeeService) {\n    this.wsService = wsService;\n    this.renderer = renderer;\n    this.el = el;\n    this.router = router;\n    this.route = route;\n    this.employeeService = employeeService;\n    this.nameControl = new FormControl('');\n    this.items = Array.from(Array(10).keys());\n    //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n    // You can use properties and methods here to keep track of the state of the square\n    this.clientID = \"\";\n    this.GameID = \"\";\n    this.playerColor = \"\";\n    this.game = null;\n    this.backgroundColor = 'white';\n    this.items = Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if (message.method == \"connect\") {\n        this.clientID = message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n        //this.send();\n      }\n\n      ;\n      if (message.method == \"create\") {\n        this.GameID = message.game.id;\n        console.log(\"New Game Created\");\n        console.log(message.game);\n        this.join();\n      }\n      ;\n      if (message.method == \"join\") {\n        this.GameID = message.game.id;\n        this.game = message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach(num => {\n          console.log(this.clientID);\n          if (num.clientId == this.clientID) {\n            this.items = Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor = num.color;\n            console.log(this.playerColor);\n            // this.backgroundColor=this.playerColor;\n          }\n        });\n      }\n\n      ;\n      if (message.method == \"update\") {\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n          this.changeColor(key, value);\n        });\n      }\n      ;\n    });\n  }\n  ngOnInit() {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (!id) {\n      alert('No id provided');\n    }\n    this.employeeService.getEmployee(id).subscribe(employee => {\n      this.employee.next(employee);\n    });\n  }\n  ngAfterViewInit() {\n    console.log('View has been initialized');\n    // Do additional setup here\n  }\n\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID\n    };\n    this.wsService.send(payLoad);\n  }\n  join() {\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId: this.nameControl.value\n    };\n    this.wsService.send(payLoad);\n  }\n  clickOnSeat(data) {\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId: this.nameControl.value,\n      ballId: data,\n      color: this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n  changeColor(i, color) {\n    //this.backgroundColor = color;\n    const div = document.getElementById(i);\n    this.renderer.setStyle(div, 'background-color', color);\n    //this.renderer.setStyle(this.el.nativeElement.querySelector(`#${i}`), 'background-color', this.backgroundColor);\n  }\n};\n\nSquareComponent = __decorate([Component({\n  selector: 'app-square',\n  templateUrl: './seat-order.component.html',\n  styleUrls: ['square.component.css']\n})], SquareComponent);\nexport { SquareComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","SquareComponent","constructor","wsService","renderer","el","router","route","employeeService","Array","from","keys","items","receive","subscribe","message","method","clientID","clientId","console","log","GameID","game","id","join","clients","forEach","num","balls","playerColor","color","state","Object","entries","key","value","changeColor","ngOnInit","snapshot","paramMap","get","alert","getEmployee","employee","next","ngAfterViewInit","send","payLoad","gameId","nameControl","clickOnSeat","data","ballId","i","div","document","getElementById","setStyle","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\KASUN\\NSBM 3rd Year\\FullStackDev\\mean-stack-publish\\mean-stack-publish\\mean-stack-example\\client\\src\\app\\seat-order\\seat-order.component.ts"],"sourcesContent":["import { Component, Renderer2, ElementRef, AfterViewInit,OnInit } from '@angular/core';\nimport { TestService } from '../test.service';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-square',\n  templateUrl: './seat-order.component.html',\n  styleUrls: ['square.component.css']\n})\nexport class SquareComponent implements AfterViewInit,OnInit{\n  nameControl = new FormControl('');\n  items =Array.from(Array(10).keys());\n  //<div class=\"square\" *ngFor=\"let square of squares\"></div>\n  // You can use properties and methods here to keep track of the state of the square\n   private clientID=\"\";\n   private GameID=\"\";\n   private playerColor=\"\";\n   private game=null;\n   backgroundColor: string = 'white';\n\n   ngOnInit() {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (!id) {\n      alert('No id provided');\n    }\n  \n    this.employeeService.getEmployee(id !).subscribe((employee) => {\n      this.employee.next(employee);\n    });\n  }\n\n   constructor(private wsService: TestService,private renderer: Renderer2, private el: ElementRef,private router: Router,\n    private route: ActivatedRoute,\n    private employeeService: EmployeeService,) {\n    this.items=Array.from(Array(0).keys());\n    this.wsService.receive().subscribe(message => {\n      if(message.method==\"connect\"){\n\n        this.clientID=message.clientId;\n        console.log(\"Connected\");\n        console.log(message.clientId);\n        //this.send();\n      };\n      if(message.method==\"create\"){\n        this.GameID=message.game.id;\n        console.log(\"New Game Created\");       \n        console.log(message.game);\n        this.join();\n      };\n      if(message.method==\"join\"){\n        this.GameID=message.game.id;\n        this.game=message.game.clients;\n        console.log(\"You joined Successfully\");\n        console.log(message.game);\n        message.game.clients.forEach((num: any) => {\n          console.log(this.clientID);\n\n          if(num.clientId==this.clientID){\n            this.items =Array.from(Array(message.game.balls).keys());\n            console.log(num);\n            this.playerColor=num.color\n            console.log(this.playerColor);\n           // this.backgroundColor=this.playerColor;\n          }\n        });\n\n      };\n      if(message.method==\"update\"){\n        console.log(message);\n        console.log(\"Game state updated\");\n        if (!message.game.state) return;\n        Object.entries(message.game.state).forEach(([key, value]) => {\n          console.log(`${key}: ${value}`);\n          this.changeColor(key,value);\n        });\n\n\n      };\n    });\n  }\n  ngAfterViewInit() {\n    console.log('View has been initialized');\n    // Do additional setup here\n  }\n\n  send() {\n    const payLoad = {\n      method: 'create',\n      clientId: this.clientID,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  join() {\n\n    const payLoad = {\n      method: 'join',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n    };\n    this.wsService.send(payLoad);\n  }\n\n  clickOnSeat(data: any) {\n\n    const payLoad = {\n      method: 'play',\n      clientId: this.clientID,\n      gameId:this.nameControl.value,\n      ballId:data,\n      color:this.playerColor\n    };\n    this.wsService.send(payLoad);\n  }\n\n  changeColor(i: any,color: any) {\n    //this.backgroundColor = color;\n    const div = document.getElementById(i);\n    this.renderer.setStyle(div, 'background-color', color);\n    //this.renderer.setStyle(this.el.nativeElement.querySelector(`#${i}`), 'background-color', this.backgroundColor);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}